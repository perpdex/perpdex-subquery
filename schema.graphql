# entities one-to-one correspondence with event

type Deposited @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  exchange: String!
  trader: String!
  amount: BigInt!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type Withdrawn @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  exchange: String!
  trader: String!
  amount: BigInt!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type ProtocolFeeTransferred @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  exchange: String!
  trader: String!
  amount: BigInt!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type LiquidityAddedExchange @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  exchange: String!
  trader: String!
  market: String!
  base: BigInt!
  quote: BigInt!
  liquidity: BigInt!
  cumBasePerLiquidityX96: BigInt!
  cumQuotePerLiquidityX96: BigInt!
  baseBalancePerShareX96: BigInt!
  sharePriceAfterX96: BigInt!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type LiquidityRemovedExchange @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  exchange: String!
  trader: String!
  market: String!
  liquidator: String!
  base: BigInt!
  quote: BigInt!
  liquidity: BigInt!
  takerBase: BigInt!
  takerQuote: BigInt!
  realizedPnl: BigInt!
  baseBalancePerShareX96: BigInt!
  sharePriceAfterX96: BigInt!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

# also represent PositionLiquidated
type PositionChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  exchange: String!
  trader: String!
  market: String!
  base: BigInt!
  quote: BigInt!
  realizedPnl: BigInt!
  protocolFee: BigInt!
  baseBalancePerShareX96: BigInt!
  sharePriceAfterX96: BigInt!

  # PositionLiquidated
  liquidator: String
  liquidationPenalty: BigInt
  liquidationReward: BigInt
  insuranceFundReward: BigInt

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type MaxMarketsPerAccountChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  exchange: String!
  value: Int!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type ImRatioChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  exchange: String!
  value: Int!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type MmRatioChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  exchange: String!
  value: Int!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type LiquidationRewardConfigChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  exchange: String!
  rewardRatio: Int!
  smoothEmaTime: Int!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type ProtocolFeeRatioChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  exchange: String!
  value: Int!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type IsMarketAllowedChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  exchange: String!
  market: String!
  isMarketAllowed: Boolean!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type FundingPaid @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  market: String!
  fundingRateX96: BigInt!
  elapsedSec: Int!
  premiumX96: BigInt!
  markPriceX96: BigInt!
  cumBasePerLiquidityX96: BigInt!
  cumQuotePerLiquidityX96: BigInt!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type LiquidityAddedMarket @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  market: String!
  base: BigInt!
  quote: BigInt!
  liquidity: BigInt!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type LiquidityRemovedMarket @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  market: String!
  base: BigInt!
  quote: BigInt!
  liquidity: BigInt!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type Swapped @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  market: String!
  isBaseToQuote: Boolean!
  isExactInput: Boolean!
  amount: BigInt!
  oppositeAmount: BigInt!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type PoolFeeRatioChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  market: String!
  value: Int!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type FundingMaxPremiumRatioChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  market: String!
  value: Int!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type FundingMaxElapsedSecChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  market: String!
  value: Int!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type FundingRolloverSecChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  market: String!
  value: Int!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type PriceLimitConfigChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  market: String!
  normalOrderRatio: Int!
  liquidationRatio: Int!
  emaNormalOrderRatio: Int!
  emaLiquidationRatio: Int!
  emaSec: Int!

  "(block number * MAX_LOG_COUNT + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

# entities not directly correspondence with event

type Protocol @entity {
  "hardcoded as 'perpdex'"
  id: ID!

  network: String!
  chainId: String!
  contractVersion: String!
  takerVolume: BigInt!
  publicMarketCount: BigInt!
  protocolFee: BigInt!
  protocolFeeRatio: Int!
  insuranceFundBalance: BigInt!
  maxMarketsPerAccount: Int!
  imRatio: Int!
  mmRatio: Int!
  rewardRatio: Int!
  smoothEmaTime: Int!

  "last updated block timestamp"
  timestamp: BigInt!
}

type Market @entity {
  "format: market address"
  id: ID!

  baseToken: String!
  quoteToken: String!
  "provided liquidity base amount"
  baseAmount: BigInt!
  "provided liquidity quote amount"
  quoteAmount: BigInt!
  "total liquidity"
  liquidity: BigInt!
  takerVolume: BigInt!
  baseBalancePerShareX96: BigInt!
  sharePriceAfterX96: BigInt!
  cumBasePerLiquidityX96: BigInt!
  cumQuotePerLiquidityX96: BigInt!
  poolFeeRatio: Int!
  maxPremiumRatio: Int!
  fundingMaxElapsedSec: Int!
  fundingRolloverSec: Int!
  normalOrderRatio: Int!
  liquidationRatio: Int!
  emaNormalOrderRatio: Int!
  emaLiquidationRatio: Int!
  emaSec: Int!

  "block timestamp when the pool was added "
  timestampAdded: BigInt!
  "last updated block timestamp"
  timestamp: BigInt!
}

type Trader @entity {
  "format: trader address"
  id: ID!

  collateralBalance: BigInt!
  markets: [String]!

  "last updated block timestamp"
  timestamp: BigInt!
}

type TraderTakerInfo @entity {
  "format: <trader address>-<market address>"
  id: ID!

  trader: String!
  market: String!
  baseBalanceShare: BigInt!
  baseBalance: BigInt!
  quoteBalance: BigInt!
  entryPrice: BigInt!

  "last updated block timestamp"
  timestamp: BigInt!
}

type TraderMakerInfo @entity {
  "format: <trader address>-<market address>"
  id: ID!

  trader: String!
  market: String!
  liquidity: BigInt!
  cumBaseSharePerLiquidityX96: BigInt!
  cumQuotePerLiquidityX96: BigInt!

  "last updated block timestamp"
  timestamp: BigInt!
}

type PositionHistory @entity {
  "format: <trader>-<market address>-<time>"
  id: ID!

  trader: String!
  market: String!
  time: Date!

  baseBalanceShare: BigInt!
  baseBalancePerShareX96: BigInt!
  baseBalance: BigInt!
  quoteBalance: BigInt!
  entryPrice: BigInt!
  realizedPnl: BigInt!
  protocolFee: BigInt!

  "last updated block timestamp"
  timestamp: BigInt!
}

type LiquidityHistory @entity {
  "format: <trader>-<market address>-<time>"
  id: ID!

  trader: String!
  market: String!
  time: Date!

  base: BigInt!
  quote: BigInt!
  liquidity: BigInt!

  "last updated block timestamp"
  timestamp: BigInt!
}

type Candle @entity {
  "format: <market address>-<timeFormat>-<time>"
  id: ID!

  market: String!
  timeFormat: Int!
  time: Date!

  openX96: BigInt!
  highX96: BigInt!
  lowX96: BigInt!
  closeX96: BigInt!
  baseAmount: BigInt!
  quoteAmount: BigInt!

  "last updated block timestamp"
  timestamp: BigInt!
}

type DaySummary @entity {
  "format: <trader id>-<day id>"
  id: ID!

  trader: String!
  "integer portion of timeStamp divided by 8640000"
  dayID: Int!
  time: Date!
  "total pnl aggregated per day for trader"
  realizedPnl: BigInt!

  "last updated block timestamp"
  timestamp: BigInt!
}
