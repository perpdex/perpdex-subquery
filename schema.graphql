type Deposited @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  trader: String!
  amount: BigInt!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type Withdrawn @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  trader: String!
  amount: BigInt!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type ProtocolFeeTransferred @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  trader: String!
  amount: BigInt!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type LiquidityAddedExchange @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  trader: String!
  market: String!
  base: BigInt!
  quote: BigInt!
  liquidity: BigInt!
  cumBasePerLiquidityX96: BigInt!
  cumQuotePerLiquidityX96: BigInt!
  baseBalancePerShareX96: BigInt!
  sharePriceAfterX96: BigInt!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type LiquidityRemovedExchange @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  trader: String!
  market: String!
  liquidator: String!
  base: BigInt!
  quote: BigInt!
  liquidity: BigInt!
  takerBase: BigInt!
  takerQuote: BigInt!
  realizedPnl: BigInt!
  baseBalancePerShareX96: BigInt!
  sharePriceAfterX96: BigInt!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type PositionLiquidated @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  trader: String!
  market: String!
  liquidator: String!
  base: BigInt!
  quote: BigInt!
  realizedPnl: BigInt!
  protocolFee: BigInt!
  baseBalancePerShareX96: BigInt!
  sharePriceAfterX96: BigInt!
  liquidationPenalty: BigInt!
  liquidationReward: BigInt!
  insuranceFundReward: BigInt!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type PositionChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  trader: String!
  market: String!
  base: BigInt!
  quote: BigInt!
  realizedPnl: BigInt!
  protocolFee: BigInt!
  baseBalancePerShareX96: BigInt!
  sharePriceAfterX96: BigInt!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type MaxMarketsPerAccountChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  value: Int!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type ImRatioChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  value: Int!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type MmRatioChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  value: Int!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type LiquidationRewardConfigChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  rewardRatio: Int!
  smoothEmaTime: Int!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type ProtocolFeeRatioChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  value: Int!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type IsMarketAllowedChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  market: String!
  isMarketAllowed: Boolean!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type FundingPaid @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  fundingRateX96: BigInt!
  elapsedSec: Int!
  premiumX96: BigInt!
  markPriceX96: BigInt!
  cumBasePerLiquidityX96: BigInt!
  cumQuotePerLiquidityX96: BigInt!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type LiquidityAddedMarket @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  base: BigInt!
  quote: BigInt!
  liquidity: BigInt!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type LiquidityRemovedMarket @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  base: BigInt!
  quote: BigInt!
  liquidity: BigInt!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type Swapped @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  isBaseToQuote: Boolean!
  isExactInput: Boolean!
  amount: BigInt!
  oppositeAmount: BigInt!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type PoolFeeRatioChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  value: Int!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type FundingMaxPremiumRatioChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  value: Int!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type FundingMaxElapsedSecChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  value: Int!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type FundingRolloverSecChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  value: Int!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type PriceLimitConfigChanged @entity {
  "format: <tx hash>-<log index>"
  id: ID!

  normalOrderRatio: Int!
  liquidationRatio: Int!
  emaNormalOrderRatio: Int!
  emaLiquidationRatio: Int!
  emaSec: Int!

  "(block number * 1000 + log index) for sorting"
  blockNumberLogIndex: BigInt!
  timestamp: BigInt!
}

type Trader @entity {
  "format: trader address"
  id: ID!

  collateralBalance: BigInt!
  markets: [String]!

  "last updated block timestamp"
  timestamp: BigInt!
}

type TraderTakerInfo @entity {
  "format: <trader address>-<market address>"
  id: ID!

  trader: String!
  market: String!
  baseBalanceShare: BigInt!
  baseBalance: BigInt!
  quoteBalance: BigInt!

  "last updated block timestamp"
  timestamp: BigInt!

  positions: [Position!]! @derivedFrom(field: "traderTakerInfoRef")

  # dayData: [TraderDayData!] @derivedFrom(field: "trader")
}

type TraderMakerInfo @entity {
  "format: <trader address>-<market address>"
  id: ID!

  trader: String!
  market: String!
  liquidity: BigInt!
  cumBaseSharePerLiquidityX96: BigInt!
  cumQuotePerLiquidityX96: BigInt!

  "last updated block timestamp"
  timestamp: BigInt!

  # "open orders"
  # openOrders: [OpenOrder!]! @derivedFrom(field: "traderMakerInfoRef")
}

type LiquidityHistory @entity {
  "format: <trader>-<market address>"
  id: ID!

  trader: String!
  market: String!

  histories: [LHistory] @derivedFrom(field: "liquidityHistory")

  timestamp: BigInt!
}

type LHistory @entity {
  "format: <trader>-<market address>-<blockNumber>-"
  id: ID!

  trader: String!
  market: String!
  time: Date!

  base: BigInt!
  quote: BigInt!
  liquidity: BigInt!

  liquidityHistory: LiquidityHistory

  "last updated block timestamp"
  timestamp: BigInt!
}

type Protocol @entity {
  "hardcoded as 'perpdex'"
  id: ID!

  network: String!
  chainId: String!
  contractVersion: String!
  publicMarketCount: BigInt!
  # "cumulative trading volume"
  # tradingVolume: BigInt!
  totalValueLocked: BigInt!
  protocolFee: BigInt!
  protocolFeeRatio: Int!
  insuranceFundBalance: BigInt!
  maxMarketsPerAccount: Int!
  imRatio: Int!
  mmRatio: Int!
  rewardRatio: Int!
  smoothEmaTime: Int!

  "last updated block timestamp"
  timestamp: BigInt!
}

type Position @entity {
  "format: <trader address>-<market address>"
  id: ID!

  trader: String!
  market: String!
  baseShare: BigInt!
  baseBalance: BigInt!
  "average open notional after this tx"
  openNotional: BigInt!
  "average entry price of the current position = abs(openNotional / baseBalance)"
  entryPrice: BigInt!
  "realized pnl of this tx"
  realizedPnl: BigInt!
  # "cumulative trading volume"
  # tradingVolume: BigInt!

  "last updated block timestamp"
  timestamp: BigInt!

  traderTakerInfoRef: TraderTakerInfo!
  marketRef: Market!
}

type PositionHistory @entity {
  "format: <trader>-<market address>"
  id: ID!

  trader: String!
  market: String!

  histories: [PHistory] @derivedFrom(field: "positionHistory")

  timestamp: BigInt!
}

type PHistory @entity {
  "format: <trader>-<market address>-<blockNumber>-"
  id: ID!

  trader: String!
  market: String!
  time: Date!

  base: BigInt!
  quote: BigInt!
  realizedPnl: BigInt!
  protocolFee: BigInt!

  positionHistory: PositionHistory

  "last updated block timestamp"
  timestamp: BigInt!
}

type OpenOrder @entity {
  "format: <maker address>-<market address>"
  id: ID!
  maker: String!
  market: String!
  "provided liquidity base"
  base: BigInt!
  "provided liquidity quote"
  quote: BigInt!
  "current liquidity"
  liquidity: BigInt!
  realizedPnl: BigInt!

  "last updated block timestamp"
  timestamp: BigInt!

  traderMakerInfoRef: TraderMakerInfo!
  marketRef: Market!
}

type Market @entity {
  "format: market address"
  id: ID!

  baseToken: String!
  quoteToken: String!
  # "cumulative trading volume"
  # tradingVolume: BigInt!
  "provided liquidity base amount"
  baseAmount: BigInt!
  "provided liquidity quote amount"
  quoteAmount: BigInt!
  "total liquidity"
  liquidity: BigInt!
  baseBalancePerShareX96: BigInt # wip
  sharePriceAfterX96: BigInt! # wip
  markPriceX96: BigInt!
  cumBasePerLiquidityX96: BigInt!
  cumQuotePerLiquidityX96: BigInt!
  poolFeeRatio: Int!
  maxPremiumRatio: Int!
  fundingMaxElapsedSec: Int!
  fundingRolloverSec: Int!
  normalOrderRatio: Int!
  liquidationRatio: Int!
  emaNormalOrderRatio: Int!
  emaLiquidationRatio: Int!
  emaSec: Int!

  "block number when the pool was added "
  blockNumberAdded: BigInt!
  "block timestamp when the pool was added "
  timestampAdded: BigInt!
  "last updated block timestamp"
  timestamp: BigInt!

  positions: [Position!]! @derivedFrom(field: "marketRef")
  # "open orders"
  # openOrders: [OpenOrder!]! @derivedFrom(field: "marketRef")
}

type Candle @entity {
  "format: <market address>-<timeFormat>-"
  id: ID!

  market: String!
  "time format"
  # examples of timeformat: 300(5m), 86400(=1d)
  timeFormat: Int!

  ohlcs: [OHLC] @derivedFrom(field: "candle")

  "last updated block timestamp"
  timestamp: BigInt!
}

type OHLC @entity {
  "format: <market address>-<time>-"
  id: ID!

  market: String!
  time: Date!

  open: BigInt!
  high: BigInt!
  low: BigInt!
  close: BigInt!

  candle: Candle

  "last updated block timestamp"
  timestamp: BigInt!
}

type DaySummary @entity {
  "format: <trader id>-<day id>"
  id: ID!

  trader: String! #(todo)trader: Trader!
  "integer portion of timeStamp divided by 8640000"
  dayID: Int!
  time: Date!
  # "trading volume aggregated per day for trader"
  # tradingVolume: BigInt!
  "total pnl aggregated per day for trader"
  realizedPnl: BigInt!

  "last updated block timestamp"
  timestamp: BigInt!
}
